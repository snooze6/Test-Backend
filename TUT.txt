npm install mongoose --save
npm install mongoose-sanitizer --save
npm install mongoose-paginate --save
npm install mongoose-search-plugin --save
npm install passport passport-local passport-local-mongoose passport-facebook --save
npm install jsonwebtoken --save
npm install mongoose-search-plugin --save
#npm install mongoose-query-paginate --save

# RUN
mongod --dbpath database

# TODO
- Modularizar bien la API
- Testear bien la seguridad
- Front end (Needs to be pretty)
  - Angularize
  - Routers
  - Separate HTMLs
  - Service to the JSON requests
- Is susceptible for mongoinyection?
- Catching errors?
- Invalidating token?
- Infinite results?

# TODO far away
- Don't bring all comments to push a new one
- Same with cuestions
- Search in comments or in questions or in results
- Paginate in listings
  - Comments
  - Questions


# DONE
- [DONE] Extract variables to config for easier deployment
  parameters in config.js
- [DONE] Control XSS in test fields
  mongoose-sanitizer
- [DONE] Don't bring comments in listing
  parameters in find({filters},{excludes})
- [DONE] Access individual tests
- [DONE] Save and Acces   s tests
- [DONE] Make sure that images are images
- [DONE] Access individual results
- [DONE] Access individual options
  - [DONE] Validate that the number is less than the number of results
- [DONE] Access individual results
- [DONE] Sanitize user
- [DONE] Sorting in the list
- [DONE] Be able to filter
    Tests.paginate({'_keywords': ret.search,'category': ret.category, 'rating': {$gt : ret.rating}},
        {select: 'title description image rating category postedBy', 'page': ret.page, 'limit': ret.limit, 'sort': ret.sort},
        function (err, auxtest){
        if (err) {
            showError(res, err, next);
        } else {
            res.json(auxtest);
        }
    });
- [DONE] Protect the API
- [DONE] Facebook integration
  - Really needed